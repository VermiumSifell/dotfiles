(if (or (doom-context-p 'init) (doom-context-p 'reload)) (doom-context-with 'modules (set 'doom-modules '#s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((:core) (:path "/home/vermium/.config/emacs/lisp/" :depth -110) (:user) (:path "/home/vermium/.config/doom/" :depth (-105 . 105)) (:config . use-package) (:path "/home/vermium/.config/emacs/modules/config/use-package" :depth -111) (:completion . company) (:path "/home/vermium/.config/emacs/modules/completion/company" :flags nil) (:completion . vertico) (:path "/home/vermium/.config/emacs/modules/completion/vertico" :flags nil) (:ui . doom) (:path "/home/vermium/.config/emacs/modules/ui/doom" :flags nil) (:ui . doom-dashboard) (:path "/home/vermium/.config/emacs/modules/ui/doom-dashboard" :flags nil) (:ui . emoji) (:path "/home/vermium/.config/emacs/modules/ui/emoji" :flags (+unicode)) (:ui . hl-todo) (:path "/home/vermium/.config/emacs/modules/ui/hl-todo" :flags nil) (:ui . indent-guides) (:path "/home/vermium/.config/emacs/modules/ui/indent-guides" :flags nil) (:ui . ligatures) (:path "/home/vermium/.config/emacs/modules/ui/ligatures" :flags nil) (:ui . minimap) (:path "/home/vermium/.config/emacs/modules/ui/minimap" :flags nil) (:ui . modeline) (:path "/home/vermium/.config/emacs/modules/ui/modeline" :flags nil) (:ui . neotree) (:path "/home/vermium/.config/emacs/modules/ui/neotree" :flags nil) (:ui . ophints) (:path "/home/vermium/.config/emacs/modules/ui/ophints" :flags nil) (:ui . popup) (:path "/home/vermium/.config/emacs/modules/ui/popup" :flags (+defaults)) (:ui . tabs) (:path "/home/vermium/.config/emacs/modules/ui/tabs" :flags nil) (:ui . treemacs) (:path "/home/vermium/.config/emacs/modules/ui/treemacs" :flags nil) (:ui . unicode) (:path "/home/vermium/.config/emacs/modules/ui/unicode" :flags nil) (:ui . vc-gutter) (:path "/home/vermium/.config/emacs/modules/ui/vc-gutter" :flags (+pretty)) (:ui . vi-tilde-fringe) (:path "/home/vermium/.config/emacs/modules/ui/vi-tilde-fringe" :flags nil) (:ui . window-select) (:path "/home/vermium/.config/emacs/modules/ui/window-select" :flags nil) (:ui . workspaces) (:path "/home/vermium/.config/emacs/modules/ui/workspaces" :flags nil) (:ui . zen) (:path "/home/vermium/.config/emacs/modules/ui/zen" :flags nil) (:editor . evil) (:path "/home/vermium/.config/emacs/modules/editor/evil" :flags (+everywhere)) (:editor . file-templates) (:path "/home/vermium/.config/emacs/modules/editor/file-templates" :flags nil) (:editor . fold) (:path "/home/vermium/.config/emacs/modules/editor/fold" :flags nil) (:editor . format) (:path "/home/vermium/.config/emacs/modules/editor/format" :flags (+onsave)) (:editor . multiple-cursors) (:path "/home/vermium/.config/emacs/modules/editor/multiple-cursors" :flags nil) (:editor . snippets) (:path "/home/vermium/.config/emacs/modules/editor/snippets" :flags nil) (:editor . word-wrap) (:path "/home/vermium/.config/emacs/modules/editor/word-wrap" :flags nil) (:emacs . dired) (:path "/home/vermium/.config/emacs/modules/emacs/dired" :flags nil) (:emacs . electric) (:path "/home/vermium/.config/emacs/modules/emacs/electric" :flags nil) (:emacs . undo) (:path "/home/vermium/.config/emacs/modules/emacs/undo" :flags nil) (:emacs . vc) (:path "/home/vermium/.config/emacs/modules/emacs/vc" :flags nil) (:checkers . syntax) (:path "/home/vermium/.config/emacs/modules/checkers/syntax" :flags nil) (:checkers . grammar) (:path "/home/vermium/.config/emacs/modules/checkers/grammar" :flags nil) (:tools . debugger) (:path "/home/vermium/.config/emacs/modules/tools/debugger" :flags nil) (:tools . docker) (:path "/home/vermium/.config/emacs/modules/tools/docker" :flags nil) (:tools . editorconfig) (:path "/home/vermium/.config/emacs/modules/tools/editorconfig" :flags nil) (:tools . eval) (:path "/home/vermium/.config/emacs/modules/tools/eval" :flags (+overlay)) (:tools . gist) (:path "/home/vermium/.config/emacs/modules/tools/gist" :flags nil) (:tools . lookup) (:path "/home/vermium/.config/emacs/modules/tools/lookup" :flags nil) (:tools . lsp) (:path "/home/vermium/.config/emacs/modules/tools/lsp" :flags nil) (:tools . magit) (:path "/home/vermium/.config/emacs/modules/tools/magit" :flags nil) (:tools . pass) (:path "/home/vermium/.config/emacs/modules/tools/pass" :flags nil) (:tools . pdf) (:path "/home/vermium/.config/emacs/modules/tools/pdf" :flags nil) (:tools . rgb) (:path "/home/vermium/.config/emacs/modules/tools/rgb" :flags nil) (:tools . tmux) (:path "/home/vermium/.config/emacs/modules/tools/tmux" :flags nil) (:tools . tree-sitter) (:path "/home/vermium/.config/emacs/modules/tools/tree-sitter" :flags nil) (:tools . upload) (:path "/home/vermium/.config/emacs/modules/tools/upload" :flags nil) (:os . tty) (:path "/home/vermium/.config/emacs/modules/os/tty" :flags nil) (:lang . data) (:path "/home/vermium/.config/emacs/modules/lang/data" :flags nil) (:lang . emacs-lisp) (:path "/home/vermium/.config/emacs/modules/lang/emacs-lisp" :flags nil) (:lang . javascript) (:path "/home/vermium/.config/emacs/modules/lang/javascript" :flags nil) (:lang . latex) (:path "/home/vermium/.config/emacs/modules/lang/latex" :flags nil) (:lang . lua) (:path "/home/vermium/.config/emacs/modules/lang/lua" :flags (+lsp)) (:lang . markdown) (:path "/home/vermium/.config/emacs/modules/lang/markdown" :flags nil) (:lang . nix) (:path "/home/vermium/.config/emacs/modules/lang/nix" :flags nil) (:lang . org) (:path "/home/vermium/.config/emacs/modules/lang/org" :flags nil) (:lang . php) (:path "/home/vermium/.config/emacs/modules/lang/php" :flags nil) (:lang . python) (:path "/home/vermium/.config/emacs/modules/lang/python" :flags nil) (:lang . rest) (:path "/home/vermium/.config/emacs/modules/lang/rest" :flags nil) (:lang . scheme) (:path "/home/vermium/.config/emacs/modules/lang/scheme" :flags (+guile)) (:lang . sh) (:path "/home/vermium/.config/emacs/modules/lang/sh" :flags nil) (:email . mu4e) (:path "/home/vermium/.config/emacs/modules/email/mu4e" :flags (+org +gmail)) (:app . calendar) (:path "/home/vermium/.config/emacs/modules/app/calendar" :flags nil) (:config . default) (:path "/home/vermium/.config/emacs/modules/config/default" :flags (+bindings +smartparens))))) (set 'doom-disabled-packages 'nil) (setplist ':core '(nil [0 -110 -110 :core nil nil nil])) (setplist ':user '(nil [1 105 -105 :user nil nil nil])) (setplist ':completion '(company [3 0 0 :completion company nil nil] vertico [4 0 0 :completion vertico nil nil])) (setplist ':ui '(doom [5 0 0 :ui doom nil nil] doom-dashboard [6 0 0 :ui doom-dashboard nil nil] emoji [7 0 0 :ui emoji (+unicode) nil] hl-todo [8 0 0 :ui hl-todo nil nil] indent-guides [9 0 0 :ui indent-guides nil nil] ligatures [10 0 0 :ui ligatures nil nil] minimap [11 0 0 :ui minimap nil nil] modeline [12 0 0 :ui modeline nil nil] neotree [13 0 0 :ui neotree nil nil] ophints [14 0 0 :ui ophints nil nil] popup [15 0 0 :ui popup (+defaults) nil] tabs [16 0 0 :ui tabs nil nil] treemacs [17 0 0 :ui treemacs nil nil] unicode [18 0 0 :ui unicode nil nil] vc-gutter [19 0 0 :ui vc-gutter (+pretty) nil] vi-tilde-fringe [20 0 0 :ui vi-tilde-fringe nil nil] window-select [21 0 0 :ui window-select nil nil] workspaces [22 0 0 :ui workspaces nil nil] zen [23 0 0 :ui zen nil nil])) (setplist ':editor '(evil [24 0 0 :editor evil (+everywhere) nil] file-templates [25 0 0 :editor file-templates nil nil] fold [26 0 0 :editor fold nil nil] format [27 0 0 :editor format (+onsave) nil] multiple-cursors [28 0 0 :editor multiple-cursors nil nil] snippets [29 0 0 :editor snippets nil nil] word-wrap [30 0 0 :editor word-wrap nil nil])) (setplist ':emacs '(dired [31 0 0 :emacs dired nil nil] electric [32 0 0 :emacs electric nil nil] undo [33 0 0 :emacs undo nil nil] vc [34 0 0 :emacs vc nil nil])) (setplist ':checkers '(syntax [35 0 0 :checkers syntax nil nil] grammar [36 0 0 :checkers grammar nil nil])) (setplist ':tools '(debugger [37 0 0 :tools debugger nil nil] docker [38 0 0 :tools docker nil nil] editorconfig [39 0 0 :tools editorconfig nil nil] eval [40 0 0 :tools eval (+overlay) nil] gist [41 0 0 :tools gist nil nil] lookup [42 0 0 :tools lookup nil nil] lsp [43 0 0 :tools lsp nil nil] magit [44 0 0 :tools magit nil nil] pass [45 0 0 :tools pass nil nil] pdf [46 0 0 :tools pdf nil nil] rgb [47 0 0 :tools rgb nil nil] tmux [48 0 0 :tools tmux nil nil] tree-sitter [49 0 0 :tools tree-sitter nil nil] upload [50 0 0 :tools upload nil nil])) (setplist ':os '(tty [51 0 0 :os tty nil nil])) (setplist ':lang '(data [52 0 0 :lang data nil nil] emacs-lisp [53 0 0 :lang emacs-lisp nil nil] javascript [54 0 0 :lang javascript nil nil] latex [55 0 0 :lang latex nil nil] lua [56 0 0 :lang lua (+lsp) nil] markdown [57 0 0 :lang markdown nil nil] nix [58 0 0 :lang nix nil nil] org [59 0 0 :lang org nil nil] php [60 0 0 :lang php nil nil] python [61 0 0 :lang python nil nil] rest [62 0 0 :lang rest nil nil] scheme [63 0 0 :lang scheme (+guile) nil] sh [64 0 0 :lang sh nil nil])) (setplist ':email '(mu4e [65 0 0 :email mu4e (+org +gmail) nil])) (setplist ':app '(calendar [66 0 0 :app calendar nil nil])) (setplist ':config '(use-package [2 -111 -111 :config use-package nil nil] default [67 0 0 :config default (+bindings +smartparens) nil])) (let ((old-custom-file custom-file)) (let ((doom-module-context [2 -111 -111 :config use-package nil nil])) (doom-load "~/.config/emacs/modules/config/use-package/init")) (let ((doom-module-context [0 -110 -110 :core nil nil nil])) (doom-load "~/.config/emacs/lisp/init")) (doom-run-hooks 'doom-before-modules-init-hook) (let ((doom-module-context [24 0 0 :editor evil (+everywhere) nil])) (doom-load "~/.config/emacs/modules/editor/evil/init")) (doom-run-hooks 'doom-after-modules-init-hook) (doom-run-hooks 'doom-before-modules-config-hook) (let ((doom-module-context [3 0 0 :completion company nil nil])) (doom-load "~/.config/emacs/modules/completion/company/config")) (let ((doom-module-context [4 0 0 :completion vertico nil nil])) (doom-load "~/.config/emacs/modules/completion/vertico/config")) (let ((doom-module-context [5 0 0 :ui doom nil nil])) (doom-load "~/.config/emacs/modules/ui/doom/config")) (let ((doom-module-context [6 0 0 :ui doom-dashboard nil nil])) (doom-load "~/.config/emacs/modules/ui/doom-dashboard/config")) (let ((doom-module-context [7 0 0 :ui emoji (+unicode) nil])) (doom-load "~/.config/emacs/modules/ui/emoji/config")) (let ((doom-module-context [8 0 0 :ui hl-todo nil nil])) (doom-load "~/.config/emacs/modules/ui/hl-todo/config")) (let ((doom-module-context [9 0 0 :ui indent-guides nil nil])) (doom-load "~/.config/emacs/modules/ui/indent-guides/config")) (let ((doom-module-context [10 0 0 :ui ligatures nil nil])) (doom-load "~/.config/emacs/modules/ui/ligatures/config")) (let ((doom-module-context [11 0 0 :ui minimap nil nil])) (doom-load "~/.config/emacs/modules/ui/minimap/config")) (let ((doom-module-context [12 0 0 :ui modeline nil nil])) (doom-load "~/.config/emacs/modules/ui/modeline/config")) (let ((doom-module-context [13 0 0 :ui neotree nil nil])) (doom-load "~/.config/emacs/modules/ui/neotree/config")) (let ((doom-module-context [14 0 0 :ui ophints nil nil])) (doom-load "~/.config/emacs/modules/ui/ophints/config")) (let ((doom-module-context [15 0 0 :ui popup (+defaults) nil])) (doom-load "~/.config/emacs/modules/ui/popup/config")) (let ((doom-module-context [16 0 0 :ui tabs nil nil])) (doom-load "~/.config/emacs/modules/ui/tabs/config")) (let ((doom-module-context [17 0 0 :ui treemacs nil nil])) (doom-load "~/.config/emacs/modules/ui/treemacs/config")) (let ((doom-module-context [19 0 0 :ui vc-gutter (+pretty) nil])) (doom-load "~/.config/emacs/modules/ui/vc-gutter/config")) (let ((doom-module-context [21 0 0 :ui window-select nil nil])) (doom-load "~/.config/emacs/modules/ui/window-select/config")) (let ((doom-module-context [22 0 0 :ui workspaces nil nil])) (doom-load "~/.config/emacs/modules/ui/workspaces/config")) (let ((doom-module-context [23 0 0 :ui zen nil nil])) (doom-load "~/.config/emacs/modules/ui/zen/config")) (let ((doom-module-context [24 0 0 :editor evil (+everywhere) nil])) (doom-load "~/.config/emacs/modules/editor/evil/config")) (let ((doom-module-context [25 0 0 :editor file-templates nil nil])) (doom-load "~/.config/emacs/modules/editor/file-templates/config")) (let ((doom-module-context [26 0 0 :editor fold nil nil])) (doom-load "~/.config/emacs/modules/editor/fold/config")) (let ((doom-module-context [27 0 0 :editor format (+onsave) nil])) (doom-load "~/.config/emacs/modules/editor/format/config")) (let ((doom-module-context [28 0 0 :editor multiple-cursors nil nil])) (doom-load "~/.config/emacs/modules/editor/multiple-cursors/config")) (let ((doom-module-context [29 0 0 :editor snippets nil nil])) (doom-load "~/.config/emacs/modules/editor/snippets/config")) (let ((doom-module-context [30 0 0 :editor word-wrap nil nil])) (doom-load "~/.config/emacs/modules/editor/word-wrap/config")) (let ((doom-module-context [31 0 0 :emacs dired nil nil])) (doom-load "~/.config/emacs/modules/emacs/dired/config")) (let ((doom-module-context [32 0 0 :emacs electric nil nil])) (doom-load "~/.config/emacs/modules/emacs/electric/config")) (let ((doom-module-context [33 0 0 :emacs undo nil nil])) (doom-load "~/.config/emacs/modules/emacs/undo/config")) (let ((doom-module-context [34 0 0 :emacs vc nil nil])) (doom-load "~/.config/emacs/modules/emacs/vc/config")) (let ((doom-module-context [35 0 0 :checkers syntax nil nil])) (doom-load "~/.config/emacs/modules/checkers/syntax/config")) (let ((doom-module-context [36 0 0 :checkers grammar nil nil])) (doom-load "~/.config/emacs/modules/checkers/grammar/config")) (let ((doom-module-context [37 0 0 :tools debugger nil nil])) (doom-load "~/.config/emacs/modules/tools/debugger/config")) (let ((doom-module-context [38 0 0 :tools docker nil nil])) (doom-load "~/.config/emacs/modules/tools/docker/config")) (let ((doom-module-context [39 0 0 :tools editorconfig nil nil])) (doom-load "~/.config/emacs/modules/tools/editorconfig/config")) (let ((doom-module-context [40 0 0 :tools eval (+overlay) nil])) (doom-load "~/.config/emacs/modules/tools/eval/config")) (let ((doom-module-context [41 0 0 :tools gist nil nil])) (doom-load "~/.config/emacs/modules/tools/gist/config")) (let ((doom-module-context [42 0 0 :tools lookup nil nil])) (doom-load "~/.config/emacs/modules/tools/lookup/config")) (let ((doom-module-context [43 0 0 :tools lsp nil nil])) (doom-load "~/.config/emacs/modules/tools/lsp/config")) (let ((doom-module-context [44 0 0 :tools magit nil nil])) (doom-load "~/.config/emacs/modules/tools/magit/config")) (let ((doom-module-context [45 0 0 :tools pass nil nil])) (doom-load "~/.config/emacs/modules/tools/pass/config")) (let ((doom-module-context [46 0 0 :tools pdf nil nil])) (doom-load "~/.config/emacs/modules/tools/pdf/config")) (let ((doom-module-context [49 0 0 :tools tree-sitter nil nil])) (doom-load "~/.config/emacs/modules/tools/tree-sitter/config")) (let ((doom-module-context [50 0 0 :tools upload nil nil])) (doom-load "~/.config/emacs/modules/tools/upload/config")) (let ((doom-module-context [51 0 0 :os tty nil nil])) (doom-load "~/.config/emacs/modules/os/tty/config")) (let ((doom-module-context [52 0 0 :lang data nil nil])) (doom-load "~/.config/emacs/modules/lang/data/config")) (let ((doom-module-context [53 0 0 :lang emacs-lisp nil nil])) (doom-load "~/.config/emacs/modules/lang/emacs-lisp/config")) (let ((doom-module-context [54 0 0 :lang javascript nil nil])) (doom-load "~/.config/emacs/modules/lang/javascript/config")) (let ((doom-module-context [55 0 0 :lang latex nil nil])) (doom-load "~/.config/emacs/modules/lang/latex/config")) (let ((doom-module-context [56 0 0 :lang lua (+lsp) nil])) (doom-load "~/.config/emacs/modules/lang/lua/config")) (let ((doom-module-context [57 0 0 :lang markdown nil nil])) (doom-load "~/.config/emacs/modules/lang/markdown/config")) (let ((doom-module-context [58 0 0 :lang nix nil nil])) (doom-load "~/.config/emacs/modules/lang/nix/config")) (let ((doom-module-context [59 0 0 :lang org nil nil])) (doom-load "~/.config/emacs/modules/lang/org/config")) (let ((doom-module-context [60 0 0 :lang php nil nil])) (doom-load "~/.config/emacs/modules/lang/php/config")) (let ((doom-module-context [61 0 0 :lang python nil nil])) (doom-load "~/.config/emacs/modules/lang/python/config")) (let ((doom-module-context [62 0 0 :lang rest nil nil])) (doom-load "~/.config/emacs/modules/lang/rest/config")) (let ((doom-module-context [63 0 0 :lang scheme (+guile) nil])) (doom-load "~/.config/emacs/modules/lang/scheme/config")) (let ((doom-module-context [64 0 0 :lang sh nil nil])) (doom-load "~/.config/emacs/modules/lang/sh/config")) (let ((doom-module-context [65 0 0 :email mu4e (+org +gmail) nil])) (doom-load "~/.config/emacs/modules/email/mu4e/config")) (let ((doom-module-context [66 0 0 :app calendar nil nil])) (doom-load "~/.config/emacs/modules/app/calendar/config")) (let ((doom-module-context [67 0 0 :config default (+bindings +smartparens) nil])) (doom-load "~/.config/emacs/modules/config/default/config")) (doom-run-hooks 'doom-after-modules-config-hook) (let ((doom-module-context [1 105 -105 :user nil nil nil])) (doom-load "~/.config/doom/config")) (when (eq custom-file old-custom-file) (doom-load custom-file 'noerror)))))